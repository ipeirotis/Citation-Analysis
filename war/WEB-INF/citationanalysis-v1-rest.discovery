{
 "kind": "discovery#restDescription",
 "etag": "\"nPbVolg1F8jpPe9kkErPtt8mpZE/U9XMOiAyPUJhp4MBtVYysNYpyD4\"",
 "discoveryVersion": "v1",
 "id": "citationanalysis:v1",
 "name": "citationanalysis",
 "version": "v1",
 "description": "This is an API",
 "ownerDomain": "appspot.com",
 "ownerName": "appspot.com",
 "packagePath": "citationanalysis",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/search-16.gif",
  "x32": "http://www.google.com/images/icons/product/search-32.gif"
 },
 "protocol": "rest",
 "baseUrl": "https://citation-analysis.appspot.com/_ah/api/",
 "basePath": "/_ah/api/",
 "rootUrl": "https://citation-analysis.appspot.com/_ah/api/",
 "servicePath": "",
 "batchPath": "batch",
 "parameters": {
  "alt": {
   "type": "string",
   "description": "Data format for the response.",
   "default": "json",
   "enum": [
    "json"
   ],
   "enumDescriptions": [
    "Responses with Content-Type of application/json"
   ],
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
   "location": "query"
  },
  "userIp": {
   "type": "string",
   "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
   "location": "query"
  }
 },
 "schemas": {
  "Author": {
   "id": "Author",
   "type": "object",
   "properties": {
    "citations": {
     "$ref": "JsonMap"
    },
    "citationsTimestamp": {
     "type": "string",
     "format": "int64"
    },
    "coauthors": {
     "type": "array",
     "items": {
      "type": "string"
     }
    },
    "coauthorsTimestamp": {
     "type": "string",
     "format": "int64"
    },
    "firstYear": {
     "type": "integer",
     "format": "int32"
    },
    "key": {
     "$ref": "Key"
    },
    "mathematica": {
     "type": "string"
    },
    "name": {
     "type": "string"
    },
    "papers": {
     "type": "array",
     "items": {
      "type": "string"
     }
    },
    "papersTimestamp": {
     "type": "string",
     "format": "int64"
    },
    "userid": {
     "type": "string"
    }
   }
  },
  "CollectionResponse_Author": {
   "id": "CollectionResponse_Author",
   "type": "object",
   "properties": {
    "items": {
     "type": "array",
     "items": {
      "$ref": "Author"
     }
    },
    "nextPageToken": {
     "type": "string"
    }
   }
  },
  "CollectionResponse_Publication": {
   "id": "CollectionResponse_Publication",
   "type": "object",
   "properties": {
    "items": {
     "type": "array",
     "items": {
      "$ref": "Publication"
     }
    },
    "nextPageToken": {
     "type": "string"
    }
   }
  },
  "JsonMap": {
   "id": "JsonMap",
   "type": "object"
  },
  "Key": {
   "id": "Key",
   "type": "object",
   "properties": {
    "appId": {
     "type": "string"
    },
    "complete": {
     "type": "boolean"
    },
    "id": {
     "type": "string",
     "format": "int64"
    },
    "kind": {
     "type": "string"
    },
    "name": {
     "type": "string"
    },
    "namespace": {
     "type": "string"
    },
    "parent": {
     "$ref": "Key"
    }
   }
  },
  "Publication": {
   "id": "Publication",
   "type": "object",
   "properties": {
    "citations": {
     "$ref": "JsonMap"
    },
    "citationsTimestamp": {
     "type": "string",
     "format": "int64"
    },
    "key": {
     "$ref": "Key"
    },
    "pubid": {
     "type": "string"
    },
    "title": {
     "type": "string"
    },
    "year": {
     "type": "integer",
     "format": "int32"
    }
   }
  }
 },
 "methods": {
  "fetchAuthor": {
   "id": "citationanalysis.fetchAuthor",
   "path": "author/fetch/{id}",
   "httpMethod": "POST",
   "parameters": {
    "id": {
     "type": "string",
     "required": true,
     "location": "path"
    }
   },
   "parameterOrder": [
    "id"
   ],
   "response": {
    "$ref": "Author"
   }
  },
  "getAuthor": {
   "id": "citationanalysis.getAuthor",
   "path": "author/id/{id}",
   "httpMethod": "GET",
   "parameters": {
    "id": {
     "type": "string",
     "required": true,
     "location": "path"
    }
   },
   "parameterOrder": [
    "id"
   ],
   "response": {
    "$ref": "Author"
   }
  },
  "getPublication": {
   "id": "citationanalysis.getPublication",
   "path": "citationanalysis/v1/publication/{id}",
   "httpMethod": "GET",
   "parameters": {
    "id": {
     "type": "string",
     "required": true,
     "format": "int64",
     "location": "path"
    }
   },
   "parameterOrder": [
    "id"
   ],
   "response": {
    "$ref": "Publication"
   }
  },
  "insertPublication": {
   "id": "citationanalysis.insertPublication",
   "path": "citationanalysis/v1/publication",
   "httpMethod": "POST",
   "request": {
    "$ref": "Publication",
    "parameterName": "resource"
   },
   "response": {
    "$ref": "Publication"
   }
  },
  "listAuthor": {
   "id": "citationanalysis.listAuthor",
   "path": "citationanalysis/v1/author",
   "httpMethod": "GET",
   "parameters": {
    "cursor": {
     "type": "string",
     "location": "query"
    },
    "limit": {
     "type": "integer",
     "format": "int32",
     "location": "query"
    }
   },
   "response": {
    "$ref": "CollectionResponse_Author"
   }
  },
  "listPublication": {
   "id": "citationanalysis.listPublication",
   "path": "citationanalysis/v1/publication",
   "httpMethod": "GET",
   "parameters": {
    "cursor": {
     "type": "string",
     "location": "query"
    },
    "limit": {
     "type": "integer",
     "format": "int32",
     "location": "query"
    }
   },
   "response": {
    "$ref": "CollectionResponse_Publication"
   }
  },
  "removePublication": {
   "id": "citationanalysis.removePublication",
   "path": "citationanalysis/v1/publication/{id}",
   "httpMethod": "DELETE",
   "parameters": {
    "id": {
     "type": "string",
     "required": true,
     "format": "int64",
     "location": "path"
    }
   },
   "parameterOrder": [
    "id"
   ]
  },
  "updatePublication": {
   "id": "citationanalysis.updatePublication",
   "path": "citationanalysis/v1/publication",
   "httpMethod": "PUT",
   "request": {
    "$ref": "Publication",
    "parameterName": "resource"
   },
   "response": {
    "$ref": "Publication"
   }
  }
 },
 "resources": {
  "authorEndpoint": {
   "methods": {
    "insertAuthor": {
     "id": "citationanalysis.authorEndpoint.insertAuthor",
     "path": "citationanalysis/v1/author",
     "httpMethod": "POST",
     "request": {
      "$ref": "Author",
      "parameterName": "resource"
     },
     "response": {
      "$ref": "Author"
     }
    },
    "removeAuthor": {
     "id": "citationanalysis.authorEndpoint.removeAuthor",
     "path": "citationanalysis/v1/author/{id}",
     "httpMethod": "DELETE",
     "parameters": {
      "id": {
       "type": "string",
       "required": true,
       "location": "path"
      }
     },
     "parameterOrder": [
      "id"
     ]
    },
    "updateAuthor": {
     "id": "citationanalysis.authorEndpoint.updateAuthor",
     "path": "citationanalysis/v1/author",
     "httpMethod": "PUT",
     "request": {
      "$ref": "Author",
      "parameterName": "resource"
     },
     "response": {
      "$ref": "Author"
     }
    }
   }
  }
 }
}
