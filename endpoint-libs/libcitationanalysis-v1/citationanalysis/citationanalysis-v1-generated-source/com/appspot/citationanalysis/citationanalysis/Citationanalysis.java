/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-08-14 15:32:06 UTC)
 * on 2013-08-20 at 02:54:19 UTC 
 * Modify at your own risk.
 */

package com.appspot.citationanalysis.citationanalysis;

/**
 * Service definition for Citationanalysis (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CitationanalysisRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Citationanalysis extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.15.0-rc of the  library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://citation-analysis.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Citationanalysis(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Citationanalysis(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the AuthorEndpoint collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Citationanalysis citationanalysis = new Citationanalysis(...);}
   *   {@code Citationanalysis.AuthorEndpoint.List request = citationanalysis.authorEndpoint().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public AuthorEndpoint authorEndpoint() {
    return new AuthorEndpoint();
  }

  /**
   * The "authorEndpoint" collection of methods.
   */
  public class AuthorEndpoint {

    /**
     * Create a request for the method "authorEndpoint.insertAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link InsertAuthor#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Author}
     * @return the request
     */
    public InsertAuthor insertAuthor(com.appspot.citationanalysis.citationanalysis.model.Author content) throws java.io.IOException {
      InsertAuthor result = new InsertAuthor(content);
      initialize(result);
      return result;
    }

    public class InsertAuthor extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Author> {

      private static final String REST_PATH = "citationanalysis/v1/author";

      /**
       * Create a request for the method "authorEndpoint.insertAuthor".
       *
       * This request holds the parameters needed by the the citationanalysis server.  After setting any
       * optional parameters, call the {@link InsertAuthor#execute()} method to invoke the remote
       * operation. <p> {@link
       * InsertAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Author}
       * @since 1.13
       */
      protected InsertAuthor(com.appspot.citationanalysis.citationanalysis.model.Author content) {
        super(Citationanalysis.this, "POST", REST_PATH, content, com.appspot.citationanalysis.citationanalysis.model.Author.class);
      }

      @Override
      public InsertAuthor setAlt(java.lang.String alt) {
        return (InsertAuthor) super.setAlt(alt);
      }

      @Override
      public InsertAuthor setFields(java.lang.String fields) {
        return (InsertAuthor) super.setFields(fields);
      }

      @Override
      public InsertAuthor setKey(java.lang.String key) {
        return (InsertAuthor) super.setKey(key);
      }

      @Override
      public InsertAuthor setOauthToken(java.lang.String oauthToken) {
        return (InsertAuthor) super.setOauthToken(oauthToken);
      }

      @Override
      public InsertAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (InsertAuthor) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public InsertAuthor setQuotaUser(java.lang.String quotaUser) {
        return (InsertAuthor) super.setQuotaUser(quotaUser);
      }

      @Override
      public InsertAuthor setUserIp(java.lang.String userIp) {
        return (InsertAuthor) super.setUserIp(userIp);
      }

      @Override
      public InsertAuthor set(String parameterName, Object value) {
        return (InsertAuthor) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "authorEndpoint.removeAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link RemoveAuthor#execute()} method to invoke the remote
     * operation.
     *
     * @param id
     * @return the request
     */
    public RemoveAuthor removeAuthor(java.lang.String id) throws java.io.IOException {
      RemoveAuthor result = new RemoveAuthor(id);
      initialize(result);
      return result;
    }

    public class RemoveAuthor extends CitationanalysisRequest<Void> {

      private static final String REST_PATH = "citationanalysis/v1/author/{id}";

      /**
       * Create a request for the method "authorEndpoint.removeAuthor".
       *
       * This request holds the parameters needed by the the citationanalysis server.  After setting any
       * optional parameters, call the {@link RemoveAuthor#execute()} method to invoke the remote
       * operation. <p> {@link
       * RemoveAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected RemoveAuthor(java.lang.String id) {
        super(Citationanalysis.this, "DELETE", REST_PATH, null, Void.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public RemoveAuthor setAlt(java.lang.String alt) {
        return (RemoveAuthor) super.setAlt(alt);
      }

      @Override
      public RemoveAuthor setFields(java.lang.String fields) {
        return (RemoveAuthor) super.setFields(fields);
      }

      @Override
      public RemoveAuthor setKey(java.lang.String key) {
        return (RemoveAuthor) super.setKey(key);
      }

      @Override
      public RemoveAuthor setOauthToken(java.lang.String oauthToken) {
        return (RemoveAuthor) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveAuthor) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveAuthor setQuotaUser(java.lang.String quotaUser) {
        return (RemoveAuthor) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveAuthor setUserIp(java.lang.String userIp) {
        return (RemoveAuthor) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public RemoveAuthor setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public RemoveAuthor set(String parameterName, Object value) {
        return (RemoveAuthor) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "authorEndpoint.updateAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link UpdateAuthor#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Author}
     * @return the request
     */
    public UpdateAuthor updateAuthor(com.appspot.citationanalysis.citationanalysis.model.Author content) throws java.io.IOException {
      UpdateAuthor result = new UpdateAuthor(content);
      initialize(result);
      return result;
    }

    public class UpdateAuthor extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Author> {

      private static final String REST_PATH = "citationanalysis/v1/author";

      /**
       * Create a request for the method "authorEndpoint.updateAuthor".
       *
       * This request holds the parameters needed by the the citationanalysis server.  After setting any
       * optional parameters, call the {@link UpdateAuthor#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdateAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Author}
       * @since 1.13
       */
      protected UpdateAuthor(com.appspot.citationanalysis.citationanalysis.model.Author content) {
        super(Citationanalysis.this, "PUT", REST_PATH, content, com.appspot.citationanalysis.citationanalysis.model.Author.class);
      }

      @Override
      public UpdateAuthor setAlt(java.lang.String alt) {
        return (UpdateAuthor) super.setAlt(alt);
      }

      @Override
      public UpdateAuthor setFields(java.lang.String fields) {
        return (UpdateAuthor) super.setFields(fields);
      }

      @Override
      public UpdateAuthor setKey(java.lang.String key) {
        return (UpdateAuthor) super.setKey(key);
      }

      @Override
      public UpdateAuthor setOauthToken(java.lang.String oauthToken) {
        return (UpdateAuthor) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateAuthor) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateAuthor setQuotaUser(java.lang.String quotaUser) {
        return (UpdateAuthor) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateAuthor setUserIp(java.lang.String userIp) {
        return (UpdateAuthor) super.setUserIp(userIp);
      }

      @Override
      public UpdateAuthor set(String parameterName, Object value) {
        return (UpdateAuthor) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "fetchAuthor".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link FetchAuthor#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public FetchAuthor fetchAuthor(java.lang.String id) throws java.io.IOException {
    FetchAuthor result = new FetchAuthor(id);
    initialize(result);
    return result;
  }

  public class FetchAuthor extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Author> {

    private static final String REST_PATH = "author/fetch/{id}";

    /**
     * Create a request for the method "fetchAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link FetchAuthor#execute()} method to invoke the remote
     * operation. <p> {@link
     * FetchAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected FetchAuthor(java.lang.String id) {
      super(Citationanalysis.this, "POST", REST_PATH, null, com.appspot.citationanalysis.citationanalysis.model.Author.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public FetchAuthor setAlt(java.lang.String alt) {
      return (FetchAuthor) super.setAlt(alt);
    }

    @Override
    public FetchAuthor setFields(java.lang.String fields) {
      return (FetchAuthor) super.setFields(fields);
    }

    @Override
    public FetchAuthor setKey(java.lang.String key) {
      return (FetchAuthor) super.setKey(key);
    }

    @Override
    public FetchAuthor setOauthToken(java.lang.String oauthToken) {
      return (FetchAuthor) super.setOauthToken(oauthToken);
    }

    @Override
    public FetchAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FetchAuthor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FetchAuthor setQuotaUser(java.lang.String quotaUser) {
      return (FetchAuthor) super.setQuotaUser(quotaUser);
    }

    @Override
    public FetchAuthor setUserIp(java.lang.String userIp) {
      return (FetchAuthor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public FetchAuthor setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public FetchAuthor set(String parameterName, Object value) {
      return (FetchAuthor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getAuthor".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link GetAuthor#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetAuthor getAuthor(java.lang.String id) throws java.io.IOException {
    GetAuthor result = new GetAuthor(id);
    initialize(result);
    return result;
  }

  public class GetAuthor extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Author> {

    private static final String REST_PATH = "author/id/{id}";

    /**
     * Create a request for the method "getAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link GetAuthor#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetAuthor(java.lang.String id) {
      super(Citationanalysis.this, "GET", REST_PATH, null, com.appspot.citationanalysis.citationanalysis.model.Author.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetAuthor setAlt(java.lang.String alt) {
      return (GetAuthor) super.setAlt(alt);
    }

    @Override
    public GetAuthor setFields(java.lang.String fields) {
      return (GetAuthor) super.setFields(fields);
    }

    @Override
    public GetAuthor setKey(java.lang.String key) {
      return (GetAuthor) super.setKey(key);
    }

    @Override
    public GetAuthor setOauthToken(java.lang.String oauthToken) {
      return (GetAuthor) super.setOauthToken(oauthToken);
    }

    @Override
    public GetAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetAuthor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetAuthor setQuotaUser(java.lang.String quotaUser) {
      return (GetAuthor) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetAuthor setUserIp(java.lang.String userIp) {
      return (GetAuthor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetAuthor setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetAuthor set(String parameterName, Object value) {
      return (GetAuthor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPublication".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link GetPublication#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetPublication getPublication(java.lang.Long id) throws java.io.IOException {
    GetPublication result = new GetPublication(id);
    initialize(result);
    return result;
  }

  public class GetPublication extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Publication> {

    private static final String REST_PATH = "citationanalysis/v1/publication/{id}";

    /**
     * Create a request for the method "getPublication".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link GetPublication#execute()} method to invoke the remote
     * operation. <p> {@link GetPublication#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetPublication(java.lang.Long id) {
      super(Citationanalysis.this, "GET", REST_PATH, null, com.appspot.citationanalysis.citationanalysis.model.Publication.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPublication setAlt(java.lang.String alt) {
      return (GetPublication) super.setAlt(alt);
    }

    @Override
    public GetPublication setFields(java.lang.String fields) {
      return (GetPublication) super.setFields(fields);
    }

    @Override
    public GetPublication setKey(java.lang.String key) {
      return (GetPublication) super.setKey(key);
    }

    @Override
    public GetPublication setOauthToken(java.lang.String oauthToken) {
      return (GetPublication) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPublication setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPublication) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPublication setQuotaUser(java.lang.String quotaUser) {
      return (GetPublication) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPublication setUserIp(java.lang.String userIp) {
      return (GetPublication) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetPublication setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetPublication set(String parameterName, Object value) {
      return (GetPublication) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertPublication".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link InsertPublication#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Publication}
   * @return the request
   */
  public InsertPublication insertPublication(com.appspot.citationanalysis.citationanalysis.model.Publication content) throws java.io.IOException {
    InsertPublication result = new InsertPublication(content);
    initialize(result);
    return result;
  }

  public class InsertPublication extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Publication> {

    private static final String REST_PATH = "citationanalysis/v1/publication";

    /**
     * Create a request for the method "insertPublication".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link InsertPublication#execute()} method to invoke the remote
     * operation. <p> {@link InsertPublication#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Publication}
     * @since 1.13
     */
    protected InsertPublication(com.appspot.citationanalysis.citationanalysis.model.Publication content) {
      super(Citationanalysis.this, "POST", REST_PATH, content, com.appspot.citationanalysis.citationanalysis.model.Publication.class);
    }

    @Override
    public InsertPublication setAlt(java.lang.String alt) {
      return (InsertPublication) super.setAlt(alt);
    }

    @Override
    public InsertPublication setFields(java.lang.String fields) {
      return (InsertPublication) super.setFields(fields);
    }

    @Override
    public InsertPublication setKey(java.lang.String key) {
      return (InsertPublication) super.setKey(key);
    }

    @Override
    public InsertPublication setOauthToken(java.lang.String oauthToken) {
      return (InsertPublication) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertPublication setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertPublication) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertPublication setQuotaUser(java.lang.String quotaUser) {
      return (InsertPublication) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertPublication setUserIp(java.lang.String userIp) {
      return (InsertPublication) super.setUserIp(userIp);
    }

    @Override
    public InsertPublication set(String parameterName, Object value) {
      return (InsertPublication) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listAuthor".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link ListAuthor#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListAuthor listAuthor() throws java.io.IOException {
    ListAuthor result = new ListAuthor();
    initialize(result);
    return result;
  }

  public class ListAuthor extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.CollectionResponseAuthor> {

    private static final String REST_PATH = "citationanalysis/v1/author";

    /**
     * Create a request for the method "listAuthor".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link ListAuthor#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListAuthor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListAuthor() {
      super(Citationanalysis.this, "GET", REST_PATH, null, com.appspot.citationanalysis.citationanalysis.model.CollectionResponseAuthor.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListAuthor setAlt(java.lang.String alt) {
      return (ListAuthor) super.setAlt(alt);
    }

    @Override
    public ListAuthor setFields(java.lang.String fields) {
      return (ListAuthor) super.setFields(fields);
    }

    @Override
    public ListAuthor setKey(java.lang.String key) {
      return (ListAuthor) super.setKey(key);
    }

    @Override
    public ListAuthor setOauthToken(java.lang.String oauthToken) {
      return (ListAuthor) super.setOauthToken(oauthToken);
    }

    @Override
    public ListAuthor setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListAuthor) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListAuthor setQuotaUser(java.lang.String quotaUser) {
      return (ListAuthor) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListAuthor setUserIp(java.lang.String userIp) {
      return (ListAuthor) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListAuthor setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListAuthor setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListAuthor set(String parameterName, Object value) {
      return (ListAuthor) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listPublication".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link ListPublication#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListPublication listPublication() throws java.io.IOException {
    ListPublication result = new ListPublication();
    initialize(result);
    return result;
  }

  public class ListPublication extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.CollectionResponsePublication> {

    private static final String REST_PATH = "citationanalysis/v1/publication";

    /**
     * Create a request for the method "listPublication".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link ListPublication#execute()} method to invoke the remote
     * operation. <p> {@link ListPublication#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ListPublication() {
      super(Citationanalysis.this, "GET", REST_PATH, null, com.appspot.citationanalysis.citationanalysis.model.CollectionResponsePublication.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListPublication setAlt(java.lang.String alt) {
      return (ListPublication) super.setAlt(alt);
    }

    @Override
    public ListPublication setFields(java.lang.String fields) {
      return (ListPublication) super.setFields(fields);
    }

    @Override
    public ListPublication setKey(java.lang.String key) {
      return (ListPublication) super.setKey(key);
    }

    @Override
    public ListPublication setOauthToken(java.lang.String oauthToken) {
      return (ListPublication) super.setOauthToken(oauthToken);
    }

    @Override
    public ListPublication setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListPublication) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListPublication setQuotaUser(java.lang.String quotaUser) {
      return (ListPublication) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListPublication setUserIp(java.lang.String userIp) {
      return (ListPublication) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListPublication setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListPublication setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListPublication set(String parameterName, Object value) {
      return (ListPublication) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removePublication".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link RemovePublication#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemovePublication removePublication(java.lang.Long id) throws java.io.IOException {
    RemovePublication result = new RemovePublication(id);
    initialize(result);
    return result;
  }

  public class RemovePublication extends CitationanalysisRequest<Void> {

    private static final String REST_PATH = "citationanalysis/v1/publication/{id}";

    /**
     * Create a request for the method "removePublication".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link RemovePublication#execute()} method to invoke the remote
     * operation. <p> {@link RemovePublication#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemovePublication(java.lang.Long id) {
      super(Citationanalysis.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemovePublication setAlt(java.lang.String alt) {
      return (RemovePublication) super.setAlt(alt);
    }

    @Override
    public RemovePublication setFields(java.lang.String fields) {
      return (RemovePublication) super.setFields(fields);
    }

    @Override
    public RemovePublication setKey(java.lang.String key) {
      return (RemovePublication) super.setKey(key);
    }

    @Override
    public RemovePublication setOauthToken(java.lang.String oauthToken) {
      return (RemovePublication) super.setOauthToken(oauthToken);
    }

    @Override
    public RemovePublication setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemovePublication) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemovePublication setQuotaUser(java.lang.String quotaUser) {
      return (RemovePublication) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemovePublication setUserIp(java.lang.String userIp) {
      return (RemovePublication) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemovePublication setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemovePublication set(String parameterName, Object value) {
      return (RemovePublication) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updatePublication".
   *
   * This request holds the parameters needed by the the citationanalysis server.  After setting any
   * optional parameters, call the {@link UpdatePublication#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Publication}
   * @return the request
   */
  public UpdatePublication updatePublication(com.appspot.citationanalysis.citationanalysis.model.Publication content) throws java.io.IOException {
    UpdatePublication result = new UpdatePublication(content);
    initialize(result);
    return result;
  }

  public class UpdatePublication extends CitationanalysisRequest<com.appspot.citationanalysis.citationanalysis.model.Publication> {

    private static final String REST_PATH = "citationanalysis/v1/publication";

    /**
     * Create a request for the method "updatePublication".
     *
     * This request holds the parameters needed by the the citationanalysis server.  After setting any
     * optional parameters, call the {@link UpdatePublication#execute()} method to invoke the remote
     * operation. <p> {@link UpdatePublication#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.citationanalysis.citationanalysis.model.Publication}
     * @since 1.13
     */
    protected UpdatePublication(com.appspot.citationanalysis.citationanalysis.model.Publication content) {
      super(Citationanalysis.this, "PUT", REST_PATH, content, com.appspot.citationanalysis.citationanalysis.model.Publication.class);
    }

    @Override
    public UpdatePublication setAlt(java.lang.String alt) {
      return (UpdatePublication) super.setAlt(alt);
    }

    @Override
    public UpdatePublication setFields(java.lang.String fields) {
      return (UpdatePublication) super.setFields(fields);
    }

    @Override
    public UpdatePublication setKey(java.lang.String key) {
      return (UpdatePublication) super.setKey(key);
    }

    @Override
    public UpdatePublication setOauthToken(java.lang.String oauthToken) {
      return (UpdatePublication) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdatePublication setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdatePublication) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdatePublication setQuotaUser(java.lang.String quotaUser) {
      return (UpdatePublication) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdatePublication setUserIp(java.lang.String userIp) {
      return (UpdatePublication) super.setUserIp(userIp);
    }

    @Override
    public UpdatePublication set(String parameterName, Object value) {
      return (UpdatePublication) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Citationanalysis}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Citationanalysis}. */
    @Override
    public Citationanalysis build() {
      return new Citationanalysis(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CitationanalysisRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCitationanalysisRequestInitializer(
        CitationanalysisRequestInitializer citationanalysisRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(citationanalysisRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
